{"version":3,"sources":["hooks/useLS.js","views/PexelsImages/SearchForm.js","services/pexels.js","views/PexelsImages/ImagesList.js","pages/Pexels/Pexels.js"],"names":["useLS","key","init_value","useState","JSON","parse","localStorage","getItem","state","setState","useEffect","setItem","stringify","SearchFrom","getSearchValues","searchValue","setSearchValue","perPage","setPerPage","handleSearchChange","e","target","name","value","onSubmit","preventDefault","console","log","type","onChange","placeholder","PexelsFetchObject","base_url","api_key","this","_searchQuery","_page","_perPage","endPoint","a","axios","defaults","baseURL","headers","common","Authorization","searchQuery","page","params","url","get","result","data","photos","status","Error","message","newPexelsFetchObject","ImagesList","searchResults","setSearchResults","setStatus","trim","resetPage","searchPhotos","then","catch","err","style","display","flexFlow","length","map","el","src","tiny","alt","photographer","id","onClick","prev","PexelsPage","title"],"mappings":"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","file":"static/js/Pexels Page.b6da9630.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\n\nexport const useLS = (key, init_value) => {\n  const [state, setState] = useState(\n    () => JSON.parse(localStorage.getItem(key)) ?? init_value,\n  );\n  useEffect(() => {\n    localStorage.setItem(key, JSON.stringify(state));\n  }, [key, state]);\n  return [state, setState];\n};\n","import { useState } from 'react';\n\nexport function SearchFrom({ getSearchValues }) {\n  const [searchValue, setSearchValue] = useState('');\n  const [perPage, setPerPage] = useState(5);\n\n  const handleSearchChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'searchValue':\n        setSearchValue(value);\n        break;\n      case 'perPage':\n        setPerPage(value);\n        break;\n      default:\n    }\n  };\n  const handleSearchSubmit = e => {\n    e.preventDefault();\n    console.log('BEFORE FETCH', searchValue, perPage);\n    getSearchValues(searchValue, perPage);\n    setSearchValue('');\n    // setPerPage(2);\n  };\n  return (\n    <form onSubmit={handleSearchSubmit}>\n      <input\n        type=\"text\"\n        name=\"searchValue\"\n        value={searchValue}\n        onChange={handleSearchChange}\n        placeholder=\"Value\"\n      />\n      <input\n        type=\"number\"\n        name=\"perPage\"\n        value={perPage}\n        onChange={handleSearchChange}\n        placeholder=\"how many results?\"\n      />\n      <button type=\"submit\">search</button>\n    </form>\n  );\n}\n","import axios from 'axios';\n\n// OOP\nexport class PexelsFetchObject {\n  constructor(base_url, api_key) {\n    this.base_url = base_url;\n    this.api_key = api_key;\n    this._searchQuery = '';\n    this._page = 1;\n    this._perPage = 5;\n    this.endPoint = '';\n  }\n  get searchQuery() {\n    return this._searchQuery;\n  }\n  set searchQuery(value) {\n    return (this._searchQuery = value);\n  }\n  get page() {\n    return this._page;\n  }\n  set page(value) {\n    return (this._page += value);\n  }\n  resetPage() {\n    return (this._page = 1);\n  }\n  get perPage() {\n    return this._perPage;\n  }\n  set perPage(value) {\n    return (this._perPage = value);\n  }\n\n  async searchPhotos() {\n    axios.defaults.baseURL = this.base_url;\n    axios.defaults.headers.common.Authorization = this.api_key;\n\n    this.endPoint = 'search';\n    console.log(\n      'searchQuery:',\n      this.searchQuery,\n      'page:',\n      this.page,\n      'perPage:',\n      this.perPage,\n    );\n    let params = `?query=${this.searchQuery}&page=${this.page}&per_page=${this.perPage}`;\n    let url = this.endPoint + params;\n\n    try {\n      const result = await axios.get(url);\n      const data = result.data.photos;\n      if (result.status === 400) throw new Error();\n      // console.log(data);\n      if (result.status === 200) return data;\n    } catch (err) {\n      return err.message;\n    }\n  }\n}\n","import { useState, useEffect } from 'react';\nimport { PexelsFetchObject } from '../../services/pexels';\nimport { useLS } from '../../hooks/useLS';\nconst base_url = `https://api.pexels.com/v1/`;\nconst api_key = `563492ad6f91700001000001390f9fee0a794c1182a72e49e0e0eae2`;\n// const zhenya_key = `563492ad6f917000010000018ad09ac3acee45ebbb46a78f456e8ffa`;\nconst newPexelsFetchObject = new PexelsFetchObject(base_url, api_key);\n// console.log(newPexelsFetchObject);\n\nexport function ImagesList({ searchValue, perPage }) {\n  const [searchResults, setSearchResults] = useLS('pexelImages', []);\n  const [status, setStatus] = useState('init');\n  // =================\n  useEffect(() => {\n    if (!searchValue.trim()) return;\n    setStatus('pending');\n    newPexelsFetchObject.resetPage();\n    newPexelsFetchObject.searchQuery = searchValue;\n    newPexelsFetchObject.perPage = perPage;\n    newPexelsFetchObject\n      .searchPhotos()\n      .then(searchResults => {\n        // console.log(searchResults);\n        setStatus('success');\n        setSearchResults(searchResults);\n      })\n      .catch(err => {\n        console.log(err);\n        setStatus('error');\n        // setStatus(() => (err ? 'error' : 'Opps'));\n      });\n\n    // return () => alert(`UNMOUNT`);\n  }, [searchValue, perPage, setSearchResults]);\n  // =================\n  const handleClick = () => {\n    newPexelsFetchObject.page = 1;\n    newPexelsFetchObject\n      .searchPhotos()\n      .then(searchResults => {\n        setSearchResults(prev => [...prev, ...searchResults]);\n        // setSearchResults(searchResults);\n        console.log('setSearchResults', searchResults);\n        setStatus('success');\n      })\n      .catch(err => {\n        // console.log(err);\n        setStatus('error');\n      });\n  };\n  if (status === 'init') {\n    return <h1>Hello! Search something</h1>;\n  }\n  if (status === 'pending') {\n    return <h1>Wait please!</h1>;\n  }\n  if (status === 'success') {\n    console.log('success', searchResults);\n    return (\n      <>\n        <ul style={{ display: 'flex', flexFlow: 'row wrap' }}>\n          {searchResults.length > 0 &&\n            searchResults.map(el => (\n              <li key={el.id}>\n                <img src={el.src.tiny} alt={el.photographer} />\n              </li>\n            ))}\n        </ul>\n        <button type=\"button\" onClick={handleClick}>\n          load more\n        </button>\n      </>\n    );\n  }\n  if (status === 'error') {\n    return <h1>ALARMA!!!</h1>;\n  }\n}\n","import { useState } from 'react';\n\nimport { SearchFrom } from '../../views/PexelsImages/SearchForm';\nimport { ImagesList } from '../../views/PexelsImages/ImagesList';\n\nexport default function PexelsPage({ title }) {\n  const [searchValue, setSearchValue] = useState('');\n  const [perPage, setPerPage] = useState(5);\n  const getSearchValues = (searchValue, perPage) => {\n    setSearchValue(searchValue);\n    setPerPage(perPage);\n  };\n  return (\n    <>\n      <h1>{title}</h1>\n      <SearchFrom getSearchValues={getSearchValues} />\n      <ImagesList searchValue={searchValue} perPage={perPage} />\n    </>\n  );\n}\n"],"sourceRoot":""}